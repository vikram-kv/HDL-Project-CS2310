/*******
* CHIP NAME: HackALU 
* INPUT: x[16], y[16], zx,nx,zy,ny,f,no
* OUTPUT: out[16], zr, ng
*/
/* Comments */
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1


CHIP HackALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

	PARTS:
	ZeroGen(out=zero);

	MUX16Bit2to1(a=x, b=zero, s=zx, out= xOr0);
	MUX16Bit2to1(a=y, b=zero, s=zy, out= yOr0);

	Xor16Bit(in=xOr0, value=nx, out=p);
	Xor16Bit(in=yOr0, value=ny, out=q);

	sHCLA(x=p, y=q, sum=pPlusq);//default - signal = false .
	AndOp(x=p, y=q, z=pAndq);

	MUX16Bit2to1(a=pAndq, b=pPlusq, s=f, out=r);

	Xor16Bit(in=r, value=no, out=tempOut);
	Xor16Bit(in=r, value=no, out=out);

	zrngGen(in=tempOut, zr=zr, ng=ng);
	
}
